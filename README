# Documentação do Projeto: Coleta de Dados Climáticos da NASA POWER

## Objetivo
Construir uma rotina em Python para consumir a API **NASA POWER** e coletar dados climáticos de uma região específica, retornando um DataFrame com as informações organizadas.

## Linguagem e Bibliotecas Utilizadas
- **Linguagem**: Python, devido à simplicidade e ampla variedade de bibliotecas.
- **Bibliotecas**:
  - `pandas`: Para manipulação e organização dos dados em DataFrame.
  - `IPython.display`: Para exibição mais elegante do DataFrame no terminal ou notebook.

## Parâmetros da API
Os dados foram coletados para a cidade de **Piracicaba-SP**, utilizando os seguintes parâmetros:
- **Latitude**: `-22.7344`
- **Longitude**: `-47.6480`
- **Período de Coleta**:
  - Data de início: `2022/01/05`
  - Data de fim: `2022/31/05`
- **Parâmetros**:
  - `TS_MIN`: Temperatura mínima (°C).
  - `TS`: Temperatura média (°C).
  - `TS_MAX`: Temperatura máxima (°C).
  - `PW`: Precipitação acumulada (mm).

### Glossário
- **TS_MIN**: Temperatura mínima da superfície terrestre em um intervalo diário.
- **TS**: Temperatura média diária da superfície terrestre.
- **TS_MAX**: Temperatura máxima da superfície terrestre em um intervalo diário.
- **PW**: Água precipitável total na coluna vertical da atmosfera.

> **Nota**: Os dados foram coletados no formato 'Daily' conforme especificado na documentação da API. Mais detalhes: [NASA POWER | Docs](https://power.larc.nasa.gov/docs/tutorials/api-getting-started/) OU  Também: (https://power.larc.nasa.gov/#resources).

---

## Estrutura do Projeto

### Arquivo: `app.py`
Responsável por:
- Consumir a API **NASA POWER** utilizando uma URL predefinida.
- Extrair e tratar os dados recebidos, incluindo:
  - Parâmetros climáticos.
  - Datas de início e fim do período analisado.
  - Coordenadas da localização.

### Arquivo: `data_frame.py`
Responsável por:
- Gerar um DataFrame a partir dos dados extraídos por `app.py`.
- Organizar as informações em um formato tabular:
  - Coluna 1: `dia_da_observacao` (data).
  - Outras colunas: `TS_MIN`, `TS`, `TS_MAX`, `PW`.
- Exibir os dados de maneira mais clara utilizando a biblioteca `IPython.display`.

---

## Como Executar

1. **Configurar o Ambiente Virtual**:
   ```bash
   python -m venv venv
   source venv/bin/activate  # No Windows: venv\Scripts\activate

2. **Instalar Dependências: 
    ```bash
    pip install pandas IPyton.display requsts

3. **Eecutar o Programa:
    ```bash
    python data_frame.py

4. **Visualizar os Resultados:
    A saída será exibida no terminal ou no console Python.